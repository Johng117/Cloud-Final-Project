
name: 'Terraform'

on:
  push:
    branches: [ "master" ]
    # paths: terraform/**

env:
  TF_LOG: TRACE
  # credentials
  AWS_ACTION_KEY_ID: ${{ secrets.AWS_ACTION_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_AWS_REGION: ${{ secrets.AWS_REGION }}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # defaults:
    #   run:
    #     shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
       
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.7

    - name: Verify Terraform version
      run: terraform --version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: show variable
      run:
        echo ${{ secrets.DB_PASS }}
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        ACL_VALUE: ${{ secrets.ACL }}
        API_IP: ${{ secrets.API_IP_ADDRESS }}
        API_KEY_PAIR: ${{ secrets.API_KEY }}
        APP_IP: ${{ secrets.APP_IP }}
        APP_KEY_PAIR: ${{ secrets.APP_KEY }}
        IMAGE: ${{ secrets.AWS_IMAGE }}
        INSTANCE: ${{ secrets.AWS_INSTANCE }}
        KEY_PAIR: ${{ secrets.BAST_KEY_PAIR }}
        BUCKET_NAME: ${{ secrets.BUCKET }}
        DB: ${{ secrets.DB }}
        HOST: ${{ secrets.DB_HOST }}
        DB_PASSWORD: ${{ secrets.DB_PASS }}
        DB_USERNAME: ${{ secrets.DB_USER }}
        DYN_HASH: ${{ secrets.DYNAMO_HASH }}
        DYN_HASH_TYPE: ${{ secrets.DYNAMO_HASH_TYPE }}
        DYN_NAME: ${{ secrets.DYNAMO_NAME }}
        FP_IG_ROUTE_CIDR: ${{ secrets.FP_IG_ROUTE }}
        MY_IP: ${{ secrets.MY_IP }}
        PRI_SUB_CIDR_1: ${{ secrets.PRI_SUB_1 }}
        PRI_SUB_CIDR_2: ${{ secrets.PRI_SUB_2 }}
        PUB_SUB_CIDR: ${{ secrets.PUB_SUB_1 }}
        PUB_SUB_2_CIDR: ${{ secrets.PUB_SUB_2 }}
        PUB_SUB_3_CIDR: ${{ secrets.PUB_SUB_3 }}
        VPC_CIDR: ${{ secrets.VPC_CIDR }}
        PRI_SUB_1_ID: ${{ secrets.PRI_1_ID }}
        PRI_SUB_2_ID: ${{ secrets.PRI_2_ID }}
      

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -list

    - name: Terraform Validate
      run: terraform validate 

   

    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan -var

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
