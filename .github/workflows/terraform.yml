# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "master" ]
    # paths: terraform/**

env:
  TF_LOG: INFO
  # credentials
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACTION_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ACL_VALUE: ${{ secrets.ACL }}
  API_IP: ${{ secrets.API_IP_ADDRESS }}
  API_KEY_PAIR: ${{ secrets.API_KEY }}
  APP_IP: ${{ secrets.APP_IP }}
  APP_KEY_PAIR: ${{ secrets.APP_KEY }}
  IMAGE: ${{ secrets.AWS_IMAGE }}
  INSTANCE: ${{ secrets.AWS_INSTANCE }}
  KEY_PAIR: ${{ secrets.BAST_KEY_PAIR }}
  BUCKET_NAME: ${{ secrets.BUCKET }}
  DB: ${{ secrets.DB }}
  HOST: ${{ secrets.DB_HOST }}
  DB_PASSWORD: ${{ secrets.DB_PASS }}
  DB_USERNAME: ${{ secrets.DB_USER }}
  DYN_HASH: ${{ secrets.DYNAMO_HASH }}
  DYN_HASH_TYPE: ${{ secrets.DYNAMO_HASH_TYPE }}
  DYN_NAME: ${{ secrets.DYNAMO_NAME }}
  FP_IG_ROUTE_CIDR: ${{ secrets.FP_IG_ROUTE }}
  MY_IP: ${{ secrets.MY_IP }}
  PRI_SUB_CIDR_1: ${{ secrets.PRI_SUB_1 }}
  PRI_SUB_CIDR_2: ${{ secrets.PRI_SUB_2 }}
  PUB_SUB_CIDR: ${{ secrets.PUB_SUB_1 }}
  PUB_SUB_2_CIDR: ${{ secrets.PUB_SUB_2 }}
  PUB_SUB_3_CIDR: ${{ secrets.PUB_SUB_3 }}
  VPC_CIDR: ${{ secrets.VPC_CIDR }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      # with:
        # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
       
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACTION_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: ${{ secrets.AWS_REGION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
