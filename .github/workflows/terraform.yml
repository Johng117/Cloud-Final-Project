name: "Terraform"

on:
  push:
    branches: ["master"]
    # paths: terraform/**

env:
  TF_LOG: TRACE

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Setup terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      # Conform terraform version
      - name: Verify Terraform version
        run: terraform --version

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Test to show a variable
      - name: show variable
        run: echo ${{ secrets.DB_PASS }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check -list

      # Runs terraform validate
      - name: Terraform Validate
        run: terraform validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        env:
          #vpc
          TF_VAR_vpc-id: ${{ secrets.VPC_ID }}
          TF_VAR_my-ip: ${{ secrets.MY_IP }}
          TF_VAR_private-subnet-1-id: ${{ secrets.PRI_1_ID }}
          TF_VAR_private-subnet-2-id: ${{ secrets.PRI_2_ID }}
          TF_VAR_vpc-cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_fp-ig-route-cidr: ${{ secrets.FP_IG_ROUTE }}
          #image
          TF_VAR_image: ${{ secrets.AWS_IMAGE }}
          #api
          TF_VAR_api-key-pair: ${{ secrets.API_KEY }}
          TF_VAR_api-user-data: ${{ secrets.API_DATA }}
          TF_VAR_api-subnet-id: ${{ secrets.API_SUBNET_ID }}
          TF_VAR_api-sg-id: ${{ secrets.API_SG_ID}}
          TF_VAR_db: ${{ secrets.DB }}
          TF_VAR_host: ${{ secrets.DB_HOST }}
          TF_VAR_password: ${{ secrets.DB_PASS }}
          TF_VAR_user: ${{ secrets.DB_USER }}
          #app
          TF_VAR_app-key-pair: ${{ secrets.APP_KEY }}
          TF_VAR_app-user-data: ${{ secrets.APP_DATA }}
          TF_VAR_app-subnet-id: ${{ secrets.APP_SUBNET_ID }}
          TF_VAR_app-sg-id: ${{ secrets.APP_SG_ID }}
          #bastion
          TF_VAR_bastion-key-pair: ${{ secrets.BAST_KEY_PAIR }}
          TF_VAR_bastion-user-data: ${{ secrets.BASTION_DATA }}
          TF_VAR_bastion-subnet-id: ${{ secrets.BASTION_SUBNET_ID }}
          TF_VAR_bastion-sg-id: ${{ secrets.BASTION_SG_ID }}
          #db
          TF_VAR_private-1: ${{ secrets.PRI_1_ID }}
          TF_VAR_private-2: ${{ secrets.PRI_2_ID }}
          TF_VAR_rds-sg: ${{ secrets.RDS_SG_ID }}
          TF_VAR_rds-password: ${{ secrets.DB_PASS }}
          TF_VAR_api: ${{ secrets.API_SG_ID}}
          #subnets
          TF_VAR_cidr-pub-1: ${{ secrets.PUB_SUB_1 }}
          TF_VAR_cidr-pub-2: ${{ secrets.PUB_SUB_2 }}
          TF_VAR_cidr-pub-3: ${{ secrets.PUB_SUB_3 }}
          TF_VAR_cidr-pri-1: ${{ secrets.PRI_SUB_1 }}
          TF_VAR_cidr-pri-2: ${{ secrets.PRI_SUB_2 }}
          #s3
          TF_VAR_bucket-name: ${{ secrets.BUCKET }}
          TF_VAR_acl-value: ${{ secrets.ACL }}
          TF_VAR_dynamo-name: ${{ secrets.DYNAMO_NAME }}
          TF_VAR_dynamo-hash: ${{ secrets.DYNAMO_HASH }}
          TF_VAR_dynamo-hash-type: ${{ secrets.DYNAMO_HASH_TYPE }}
          TF_VAR_region: ${{ secrets.AWS_REGION }}

        # On push to "master", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
