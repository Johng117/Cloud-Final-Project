name: "Terraform"

on:
  push:
    branches: ["master"]
    # paths: terraform/**

env:
  TF_LOG: TRACE
  # credentials
  AWS_ACTION_KEY_ID: ${{ secrets.AWS_ACTION_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_AWS_REGION: ${{ secrets.AWS_REGION }}

  ACL_VALUE: ${{ secrets.ACL }}
  API_IP: ${{ secrets.API_IP_ADDRESS }}
  API_KEY_PAIR: ${{ secrets.API_KEY }}
  APP_IP: ${{ secrets.APP_IP }}
  APP_KEY_PAIR: ${{ secrets.APP_KEY }}
  IMAGE: ${{ secrets.AWS_IMAGE }}
  INSTANCE: ${{ secrets.AWS_INSTANCE }}
  KEY_PAIR: ${{ secrets.BAST_KEY_PAIR }}
  BUCKET_NAME: ${{ secrets.BUCKET }}
  DB: ${{ secrets.DB }}
  HOST: ${{ secrets.DB_HOST }}
  DB_PASSWORD: ${{ secrets.DB_PASS }}
  DB_USERNAME: ${{ secrets.DB_USER }}
  DYN_HASH: ${{ secrets.DYNAMO_HASH }}
  DYN_HASH_TYPE: ${{ secrets.DYNAMO_HASH_TYPE }}
  DYN_NAME: ${{ secrets.DYNAMO_NAME }}
  FP_IG_ROUTE_CIDR: ${{ secrets.FP_IG_ROUTE }}
  MY_IP: ${{ secrets.MY_IP }}
  PRI_SUB_CIDR_1: ${{ secrets.PRI_SUB_1 }}
  PRI_SUB_CIDR_2: ${{ secrets.PRI_SUB_2 }}
  PUB_SUB_CIDR: ${{ secrets.PUB_SUB_1 }}
  PUB_SUB_2_CIDR: ${{ secrets.PUB_SUB_2 }}
  PUB_SUB_3_CIDR: ${{ secrets.PUB_SUB_3 }}
  VPC_CIDR: ${{ secrets.VPC_CIDR }}
  PRI_SUB_1_ID: ${{ secrets.PRI_1_ID }}
  PRI_SUB_2_ID: ${{ secrets.PRI_2_ID }}

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # defaults:
    #   run:
    #     shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Setup terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      # Conform terraform version
      - name: Verify Terraform version
        run: terraform --version

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Test to show a variable
      - name: show variable
        run: echo ${{ secrets.DB_PASS }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check -list

      #
      # - name: Terraform Validate
      #   run: terraform validate
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        env:
          #vpc
          TF_VAR_vpc-id: ${{ secrets.VPC_ID }}
          TF_VAR_my-ip: ${{ secrets.MY_IP }}
          TF_VAR_private-subnet-1-id: ${{ secrets.PRI_1_ID }}
          TF_VAR_private-subnet-2-id: ${{ secrets.PRI_2_ID }}
          TF_VAR_vpc-cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_fp-ig-route-cidr: ${{ secrets.FP_IG_ROUTE }}
          #image
          TF_VAR_image: ${{ secrets.AWS_IMAGE }}
          #api
          TF_VAR_api-key-pair: ${{ secrets.API_KEY }}
          TF_VAR_api-user-data: ${{ secrets.API_DATA }}
          TF_VAR_api-subnet-id: ${{ secrets.}}
          TF_VAR_api-sg-id:
          TF_VAR_db:
          TF_VAR_host:
          TF_VAR_password:
          TF_VAR_user:
          #app
          TF_VAR_app-key-pair: ${{ secrets.APP_KEY }}
          TF_VAR_app-user-data:
          TF_VAR_app-subnet-id:
          TF_VAR_app-sg-id:
          #bastion
          TF_VAR_bastion-key-pair: ${{ secrets.BAST_KEY_PAIR }}
          TF_VAR_bastion-user-data: ${{ secrets.BASTION_DATA }}
          TF_VAR_bastion-subnet-id:
          TF_VAR_bastion-sg-id:
          #db
          TF_VAR_private-1:
          TF_VAR_private-2:
          TF_VAR_rds-sg:
          TF_VAR_rds-password:
          TF_VAR_user:
          TF_VAR_api:
          #subnets
          TF_VAR_cidr-pub-1:
          TF_VAR_cidr-pub-2:
          TF_VAR_cidr-pub-3:
          TF_VAR_cidr-pri-1:
          TF_VAR_cidr-pri-2:
          #s3
          TF_VAR_bucket-name:
          TF_VAR_acl-value:
          TF_VAR_dynamo-name:
          TF_VAR_dynamo-hash:
          TF_VAR_dynamo-hash-type:
          TF_VAR_region:

        # On push to "master", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
